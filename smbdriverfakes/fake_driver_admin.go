// Code generated by counterfeiter. DO NOT EDIT.
package smbdriverfakes

import (
	sync "sync"

	dockerdriver "code.cloudfoundry.org/dockerdriver"
	driveradmin "code.cloudfoundry.org/smbdriver/driveradmin"
)

type FakeDriverAdmin struct {
	EvacuateStub        func(dockerdriver.Env) driveradmin.ErrorResponse
	evacuateMutex       sync.RWMutex
	evacuateArgsForCall []struct {
		arg1 dockerdriver.Env
	}
	evacuateReturns struct {
		result1 driveradmin.ErrorResponse
	}
	evacuateReturnsOnCall map[int]struct {
		result1 driveradmin.ErrorResponse
	}
	PingStub        func(dockerdriver.Env) driveradmin.ErrorResponse
	pingMutex       sync.RWMutex
	pingArgsForCall []struct {
		arg1 dockerdriver.Env
	}
	pingReturns struct {
		result1 driveradmin.ErrorResponse
	}
	pingReturnsOnCall map[int]struct {
		result1 driveradmin.ErrorResponse
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDriverAdmin) Evacuate(arg1 dockerdriver.Env) driveradmin.ErrorResponse {
	fake.evacuateMutex.Lock()
	ret, specificReturn := fake.evacuateReturnsOnCall[len(fake.evacuateArgsForCall)]
	fake.evacuateArgsForCall = append(fake.evacuateArgsForCall, struct {
		arg1 dockerdriver.Env
	}{arg1})
	fake.recordInvocation("Evacuate", []interface{}{arg1})
	fake.evacuateMutex.Unlock()
	if fake.EvacuateStub != nil {
		return fake.EvacuateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.evacuateReturns
	return fakeReturns.result1
}

func (fake *FakeDriverAdmin) EvacuateCallCount() int {
	fake.evacuateMutex.RLock()
	defer fake.evacuateMutex.RUnlock()
	return len(fake.evacuateArgsForCall)
}

func (fake *FakeDriverAdmin) EvacuateCalls(stub func(dockerdriver.Env) driveradmin.ErrorResponse) {
	fake.evacuateMutex.Lock()
	defer fake.evacuateMutex.Unlock()
	fake.EvacuateStub = stub
}

func (fake *FakeDriverAdmin) EvacuateArgsForCall(i int) dockerdriver.Env {
	fake.evacuateMutex.RLock()
	defer fake.evacuateMutex.RUnlock()
	argsForCall := fake.evacuateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDriverAdmin) EvacuateReturns(result1 driveradmin.ErrorResponse) {
	fake.evacuateMutex.Lock()
	defer fake.evacuateMutex.Unlock()
	fake.EvacuateStub = nil
	fake.evacuateReturns = struct {
		result1 driveradmin.ErrorResponse
	}{result1}
}

func (fake *FakeDriverAdmin) EvacuateReturnsOnCall(i int, result1 driveradmin.ErrorResponse) {
	fake.evacuateMutex.Lock()
	defer fake.evacuateMutex.Unlock()
	fake.EvacuateStub = nil
	if fake.evacuateReturnsOnCall == nil {
		fake.evacuateReturnsOnCall = make(map[int]struct {
			result1 driveradmin.ErrorResponse
		})
	}
	fake.evacuateReturnsOnCall[i] = struct {
		result1 driveradmin.ErrorResponse
	}{result1}
}

func (fake *FakeDriverAdmin) Ping(arg1 dockerdriver.Env) driveradmin.ErrorResponse {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct {
		arg1 dockerdriver.Env
	}{arg1})
	fake.recordInvocation("Ping", []interface{}{arg1})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pingReturns
	return fakeReturns.result1
}

func (fake *FakeDriverAdmin) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeDriverAdmin) PingCalls(stub func(dockerdriver.Env) driveradmin.ErrorResponse) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = stub
}

func (fake *FakeDriverAdmin) PingArgsForCall(i int) dockerdriver.Env {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	argsForCall := fake.pingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDriverAdmin) PingReturns(result1 driveradmin.ErrorResponse) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 driveradmin.ErrorResponse
	}{result1}
}

func (fake *FakeDriverAdmin) PingReturnsOnCall(i int, result1 driveradmin.ErrorResponse) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 driveradmin.ErrorResponse
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 driveradmin.ErrorResponse
	}{result1}
}

func (fake *FakeDriverAdmin) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evacuateMutex.RLock()
	defer fake.evacuateMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDriverAdmin) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driveradmin.DriverAdmin = new(FakeDriverAdmin)
