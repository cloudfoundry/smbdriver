// Code generated by counterfeiter. DO NOT EDIT.
package smbdriverfakes

import (
	sync "sync"

	dockerdriver "code.cloudfoundry.org/dockerdriver"
	driveradmin "code.cloudfoundry.org/smbdriver/driveradmin"
)

type FakeDrainable struct {
	DrainStub        func(dockerdriver.Env) error
	drainMutex       sync.RWMutex
	drainArgsForCall []struct {
		arg1 dockerdriver.Env
	}
	drainReturns struct {
		result1 error
	}
	drainReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDrainable) Drain(arg1 dockerdriver.Env) error {
	fake.drainMutex.Lock()
	ret, specificReturn := fake.drainReturnsOnCall[len(fake.drainArgsForCall)]
	fake.drainArgsForCall = append(fake.drainArgsForCall, struct {
		arg1 dockerdriver.Env
	}{arg1})
	fake.recordInvocation("Drain", []interface{}{arg1})
	fake.drainMutex.Unlock()
	if fake.DrainStub != nil {
		return fake.DrainStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.drainReturns
	return fakeReturns.result1
}

func (fake *FakeDrainable) DrainCallCount() int {
	fake.drainMutex.RLock()
	defer fake.drainMutex.RUnlock()
	return len(fake.drainArgsForCall)
}

func (fake *FakeDrainable) DrainCalls(stub func(dockerdriver.Env) error) {
	fake.drainMutex.Lock()
	defer fake.drainMutex.Unlock()
	fake.DrainStub = stub
}

func (fake *FakeDrainable) DrainArgsForCall(i int) dockerdriver.Env {
	fake.drainMutex.RLock()
	defer fake.drainMutex.RUnlock()
	argsForCall := fake.drainArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDrainable) DrainReturns(result1 error) {
	fake.drainMutex.Lock()
	defer fake.drainMutex.Unlock()
	fake.DrainStub = nil
	fake.drainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDrainable) DrainReturnsOnCall(i int, result1 error) {
	fake.drainMutex.Lock()
	defer fake.drainMutex.Unlock()
	fake.DrainStub = nil
	if fake.drainReturnsOnCall == nil {
		fake.drainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.drainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDrainable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.drainMutex.RLock()
	defer fake.drainMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDrainable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driveradmin.Drainable = new(FakeDrainable)
