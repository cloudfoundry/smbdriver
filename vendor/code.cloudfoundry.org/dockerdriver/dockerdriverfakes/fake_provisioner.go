// Code generated by counterfeiter. DO NOT EDIT.
package dockerdriverfakes

import (
	"sync"

	"code.cloudfoundry.org/dockerdriver"
)

type FakeProvisioner struct {
	CreateStub        func(env dockerdriver.Env, createRequest dockerdriver.CreateRequest) dockerdriver.ErrorResponse
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		env           dockerdriver.Env
		createRequest dockerdriver.CreateRequest
	}
	createReturns struct {
		result1 dockerdriver.ErrorResponse
	}
	createReturnsOnCall map[int]struct {
		result1 dockerdriver.ErrorResponse
	}
	RemoveStub        func(env dockerdriver.Env, removeRequest dockerdriver.RemoveRequest) dockerdriver.ErrorResponse
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		env           dockerdriver.Env
		removeRequest dockerdriver.RemoveRequest
	}
	removeReturns struct {
		result1 dockerdriver.ErrorResponse
	}
	removeReturnsOnCall map[int]struct {
		result1 dockerdriver.ErrorResponse
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProvisioner) Create(env dockerdriver.Env, createRequest dockerdriver.CreateRequest) dockerdriver.ErrorResponse {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		env           dockerdriver.Env
		createRequest dockerdriver.CreateRequest
	}{env, createRequest})
	fake.recordInvocation("Create", []interface{}{env, createRequest})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(env, createRequest)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeProvisioner) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeProvisioner) CreateArgsForCall(i int) (dockerdriver.Env, dockerdriver.CreateRequest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].env, fake.createArgsForCall[i].createRequest
}

func (fake *FakeProvisioner) CreateReturns(result1 dockerdriver.ErrorResponse) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 dockerdriver.ErrorResponse
	}{result1}
}

func (fake *FakeProvisioner) CreateReturnsOnCall(i int, result1 dockerdriver.ErrorResponse) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 dockerdriver.ErrorResponse
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 dockerdriver.ErrorResponse
	}{result1}
}

func (fake *FakeProvisioner) Remove(env dockerdriver.Env, removeRequest dockerdriver.RemoveRequest) dockerdriver.ErrorResponse {
	fake.removeMutex.Lock()
	ret, specificReturn := fake.removeReturnsOnCall[len(fake.removeArgsForCall)]
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		env           dockerdriver.Env
		removeRequest dockerdriver.RemoveRequest
	}{env, removeRequest})
	fake.recordInvocation("Remove", []interface{}{env, removeRequest})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		return fake.RemoveStub(env, removeRequest)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeReturns.result1
}

func (fake *FakeProvisioner) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeProvisioner) RemoveArgsForCall(i int) (dockerdriver.Env, dockerdriver.RemoveRequest) {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].env, fake.removeArgsForCall[i].removeRequest
}

func (fake *FakeProvisioner) RemoveReturns(result1 dockerdriver.ErrorResponse) {
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 dockerdriver.ErrorResponse
	}{result1}
}

func (fake *FakeProvisioner) RemoveReturnsOnCall(i int, result1 dockerdriver.ErrorResponse) {
	fake.RemoveStub = nil
	if fake.removeReturnsOnCall == nil {
		fake.removeReturnsOnCall = make(map[int]struct {
			result1 dockerdriver.ErrorResponse
		})
	}
	fake.removeReturnsOnCall[i] = struct {
		result1 dockerdriver.ErrorResponse
	}{result1}
}

func (fake *FakeProvisioner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProvisioner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dockerdriver.Provisioner = new(FakeProvisioner)
