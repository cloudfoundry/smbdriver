// Code generated by counterfeiter. DO NOT EDIT.
package invokerfakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/volumedriver/invoker"
)

type FakeInvokeResult struct {
	StdErrorStub        func() string
	stdErrorMutex       sync.RWMutex
	stdErrorArgsForCall []struct {
	}
	stdErrorReturns struct {
		result1 string
	}
	stdErrorReturnsOnCall map[int]struct {
		result1 string
	}
	StdOutputStub        func() string
	stdOutputMutex       sync.RWMutex
	stdOutputArgsForCall []struct {
	}
	stdOutputReturns struct {
		result1 string
	}
	stdOutputReturnsOnCall map[int]struct {
		result1 string
	}
	WaitStub        func() error
	waitMutex       sync.RWMutex
	waitArgsForCall []struct {
	}
	waitReturns struct {
		result1 error
	}
	waitReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForStub        func(string, time.Duration) error
	waitForMutex       sync.RWMutex
	waitForArgsForCall []struct {
		arg1 string
		arg2 time.Duration
	}
	waitForReturns struct {
		result1 error
	}
	waitForReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInvokeResult) StdError() string {
	fake.stdErrorMutex.Lock()
	ret, specificReturn := fake.stdErrorReturnsOnCall[len(fake.stdErrorArgsForCall)]
	fake.stdErrorArgsForCall = append(fake.stdErrorArgsForCall, struct {
	}{})
	fake.recordInvocation("StdError", []interface{}{})
	fake.stdErrorMutex.Unlock()
	if fake.StdErrorStub != nil {
		return fake.StdErrorStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.stdErrorReturns
	return fakeReturns.result1
}

func (fake *FakeInvokeResult) StdErrorCallCount() int {
	fake.stdErrorMutex.RLock()
	defer fake.stdErrorMutex.RUnlock()
	return len(fake.stdErrorArgsForCall)
}

func (fake *FakeInvokeResult) StdErrorCalls(stub func() string) {
	fake.stdErrorMutex.Lock()
	defer fake.stdErrorMutex.Unlock()
	fake.StdErrorStub = stub
}

func (fake *FakeInvokeResult) StdErrorReturns(result1 string) {
	fake.stdErrorMutex.Lock()
	defer fake.stdErrorMutex.Unlock()
	fake.StdErrorStub = nil
	fake.stdErrorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInvokeResult) StdErrorReturnsOnCall(i int, result1 string) {
	fake.stdErrorMutex.Lock()
	defer fake.stdErrorMutex.Unlock()
	fake.StdErrorStub = nil
	if fake.stdErrorReturnsOnCall == nil {
		fake.stdErrorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.stdErrorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInvokeResult) StdOutput() string {
	fake.stdOutputMutex.Lock()
	ret, specificReturn := fake.stdOutputReturnsOnCall[len(fake.stdOutputArgsForCall)]
	fake.stdOutputArgsForCall = append(fake.stdOutputArgsForCall, struct {
	}{})
	fake.recordInvocation("StdOutput", []interface{}{})
	fake.stdOutputMutex.Unlock()
	if fake.StdOutputStub != nil {
		return fake.StdOutputStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.stdOutputReturns
	return fakeReturns.result1
}

func (fake *FakeInvokeResult) StdOutputCallCount() int {
	fake.stdOutputMutex.RLock()
	defer fake.stdOutputMutex.RUnlock()
	return len(fake.stdOutputArgsForCall)
}

func (fake *FakeInvokeResult) StdOutputCalls(stub func() string) {
	fake.stdOutputMutex.Lock()
	defer fake.stdOutputMutex.Unlock()
	fake.StdOutputStub = stub
}

func (fake *FakeInvokeResult) StdOutputReturns(result1 string) {
	fake.stdOutputMutex.Lock()
	defer fake.stdOutputMutex.Unlock()
	fake.StdOutputStub = nil
	fake.stdOutputReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInvokeResult) StdOutputReturnsOnCall(i int, result1 string) {
	fake.stdOutputMutex.Lock()
	defer fake.stdOutputMutex.Unlock()
	fake.StdOutputStub = nil
	if fake.stdOutputReturnsOnCall == nil {
		fake.stdOutputReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.stdOutputReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInvokeResult) Wait() error {
	fake.waitMutex.Lock()
	ret, specificReturn := fake.waitReturnsOnCall[len(fake.waitArgsForCall)]
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct {
	}{})
	fake.recordInvocation("Wait", []interface{}{})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		return fake.WaitStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitReturns
	return fakeReturns.result1
}

func (fake *FakeInvokeResult) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeInvokeResult) WaitCalls(stub func() error) {
	fake.waitMutex.Lock()
	defer fake.waitMutex.Unlock()
	fake.WaitStub = stub
}

func (fake *FakeInvokeResult) WaitReturns(result1 error) {
	fake.waitMutex.Lock()
	defer fake.waitMutex.Unlock()
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInvokeResult) WaitReturnsOnCall(i int, result1 error) {
	fake.waitMutex.Lock()
	defer fake.waitMutex.Unlock()
	fake.WaitStub = nil
	if fake.waitReturnsOnCall == nil {
		fake.waitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInvokeResult) WaitFor(arg1 string, arg2 time.Duration) error {
	fake.waitForMutex.Lock()
	ret, specificReturn := fake.waitForReturnsOnCall[len(fake.waitForArgsForCall)]
	fake.waitForArgsForCall = append(fake.waitForArgsForCall, struct {
		arg1 string
		arg2 time.Duration
	}{arg1, arg2})
	fake.recordInvocation("WaitFor", []interface{}{arg1, arg2})
	fake.waitForMutex.Unlock()
	if fake.WaitForStub != nil {
		return fake.WaitForStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForReturns
	return fakeReturns.result1
}

func (fake *FakeInvokeResult) WaitForCallCount() int {
	fake.waitForMutex.RLock()
	defer fake.waitForMutex.RUnlock()
	return len(fake.waitForArgsForCall)
}

func (fake *FakeInvokeResult) WaitForCalls(stub func(string, time.Duration) error) {
	fake.waitForMutex.Lock()
	defer fake.waitForMutex.Unlock()
	fake.WaitForStub = stub
}

func (fake *FakeInvokeResult) WaitForArgsForCall(i int) (string, time.Duration) {
	fake.waitForMutex.RLock()
	defer fake.waitForMutex.RUnlock()
	argsForCall := fake.waitForArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeInvokeResult) WaitForReturns(result1 error) {
	fake.waitForMutex.Lock()
	defer fake.waitForMutex.Unlock()
	fake.WaitForStub = nil
	fake.waitForReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInvokeResult) WaitForReturnsOnCall(i int, result1 error) {
	fake.waitForMutex.Lock()
	defer fake.waitForMutex.Unlock()
	fake.WaitForStub = nil
	if fake.waitForReturnsOnCall == nil {
		fake.waitForReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInvokeResult) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stdErrorMutex.RLock()
	defer fake.stdErrorMutex.RUnlock()
	fake.stdOutputMutex.RLock()
	defer fake.stdOutputMutex.RUnlock()
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	fake.waitForMutex.RLock()
	defer fake.waitForMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInvokeResult) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ invoker.InvokeResult = new(FakeInvokeResult)
